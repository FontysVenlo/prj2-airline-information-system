package io.github.fontysvenlo.ais.persistence;

import io.github.fontysvenlo.ais.persistence.api.CustomerRepository;
import java.util.List;
import javax.sql.DataSource;

import io.github.fontysvenlo.ais.datarecords.CustomerData;
import java.util.ArrayList;
import java.util.Collections;

/**
 * This class knows everything about storing and retrieving customers from the database.
 * At the moment only returns dummy object with an id that is set.
 * Normally it will connect to a database and do all the handling.
 */
class CustomerRepositoryImpl implements CustomerRepository {
    
    private final DataSource db;
    //private final List<CustomerData> customers = new ArrayList<>(Arrays.asList(new CustomerData(1, "John", "Doe", LocalDate.of(2025, 1, 1)))); 
    private final List<CustomerData> customers = new ArrayList<>(); 
    
    public CustomerRepositoryImpl(DBConfig config) {
        this.db = DBProvider.getDataSource(config);
    }

    /**
     * @see CustomerRepository#add(CustomerData)
     */
    @Override
    public CustomerData add(CustomerData customerData) {
        // Create dummy customerData object with id. Normally, the id would be generated by the database
        int maxId = customers.stream().mapToInt(CustomerData::id).max().orElse(0);
        CustomerData customerDataWithId = new CustomerData( maxId++, customerData.firstName(), customerData.lastName(), customerData.dateOfBirth());
        customers.add(customerDataWithId);
        return customerDataWithId;
    }

    /**
     * @see CustomerRepository#getAll(CustomerData)
     */
    @Override
    public List<CustomerData> getAll() {
        // TODO: Implement the actual database storage
        // For now, return a dummy list
        return Collections.unmodifiableList(customers);
    }
}
